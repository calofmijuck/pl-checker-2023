(* Exercise 4. crazy3add *)
open Ex4
open Testlib

let rec crazy3val (n: crazy3): int =
  match n with
  | NIL -> 0
  | ZERO m -> 0 + 3 * crazy3val(m)
  | ONE m -> 1 + 3 * crazy3val(m)
  | MONE m -> -1 + 3 * crazy3val(m)
  | TWO m -> 2 + 3 * crazy3val(m)
  | MTWO m -> -2 + 3 * crazy3val(m)

module TestEx4: TestEx =
  struct
    type testcase =
      | CRAZY3ADD of crazy3 * crazy3 * int * int * int

    let testcases: testcase list =
      [ CRAZY3ADD (ZERO(TWO(ONE(TWO(TWO(ZERO(ONE NIL)))))), MTWO(ZERO(MTWO(MONE(MTWO(MTWO NIL))))), 960, -695, 265)
      ; CRAZY3ADD (ONE(ZERO(ONE(TWO(ONE NIL)))), MTWO(MONE(ZERO(ZERO(MTWO(MONE NIL))))), 145, -410, -265)
      ; CRAZY3ADD (MONE(MTWO(MTWO(MTWO(MTWO(ZERO(MONE NIL)))))), ONE(TWO(ZERO(TWO(TWO(ONE NIL))))), -970, 466, -504)
      ; CRAZY3ADD (MONE(MTWO(MTWO(MTWO(MTWO NIL)))), MONE(MONE(MONE(MTWO(ZERO(ZERO(MONE NIL)))))), -241, -796, -1037)
      ; CRAZY3ADD (ONE(ONE(TWO(ZERO(ZERO(TWO NIL))))), ONE(ZERO(ONE(TWO(TWO(ONE NIL))))), 508, 469, 977)
      ; CRAZY3ADD (ZERO(MONE(MONE(MONE(MONE(MTWO NIL))))), MTWO(ZERO(MTWO(ZERO(MONE(MTWO NIL))))), -606, -587, -1193)
      ; CRAZY3ADD (MONE(ZERO(ZERO(MTWO(MTWO(MTWO NIL))))), ZERO(ONE(TWO(ONE(ZERO(ZERO(ONE NIL)))))), -703, 777, 74)
      ; CRAZY3ADD (MONE(MTWO(MTWO(MONE(ZERO(MONE NIL))))), MTWO(MTWO(ZERO(MTWO(MTWO(MTWO NIL))))), -295, -710, -1005)
      ; CRAZY3ADD (ONE(ONE(TWO(ZERO(ZERO(ZERO(ONE NIL)))))), MTWO(ZERO(ZERO(MTWO(ZERO(MONE NIL))))), 751, -299, 452)
      ; CRAZY3ADD (ONE(ZERO(TWO(TWO(TWO(ONE NIL))))), TWO(ZERO(TWO(ONE(ONE(ONE NIL))))), 478, 371, 849)
      ; CRAZY3ADD (ONE(TWO(TWO(ZERO(ONE(ONE NIL))))), ONE(TWO(TWO(TWO(TWO(ONE NIL))))), 349, 484, 833)
      ; CRAZY3ADD (ZERO(TWO(ZERO(ZERO(TWO(ONE NIL))))), MONE(ZERO(ZERO(ZERO(MONE(MONE NIL))))), 411, -325, 86)
      ; CRAZY3ADD (TWO(ZERO(ZERO(ZERO(ONE(TWO NIL))))), ZERO(TWO(TWO(TWO(TWO(ONE NIL))))), 569, 483, 1052)
      ; CRAZY3ADD (MTWO(ZERO(MTWO(ZERO(MONE(MTWO NIL))))), ONE(TWO(ONE(ZERO(ONE(ZERO(ONE NIL)))))), -587, 826, 239)
      ; CRAZY3ADD (ONE(ZERO(TWO(ONE(ONE NIL)))), ONE(TWO(ONE(ZERO(ZERO(ONE NIL))))), 127, 259, 386)
      ; CRAZY3ADD (TWO(ZERO(ONE(ONE(TWO(ZERO(ONE NIL)))))), TWO(TWO(ZERO(ZERO(ZERO(ZERO(ONE NIL)))))), 929, 737, 1666)
      ; CRAZY3ADD (MONE(MTWO(ZERO(ZERO(MTWO NIL)))), ZERO(TWO(ZERO(ZERO(ZERO(TWO NIL))))), -169, 492, 323)
      ; CRAZY3ADD (ONE(ONE(ZERO(TWO(ONE NIL)))), ONE(ONE(ZERO(TWO(ONE(TWO NIL))))), 139, 625, 764)
      ; CRAZY3ADD (ZERO(ZERO(ZERO(ZERO(ZERO(ONE NIL))))), ONE(TWO(ONE(TWO(ONE(ONE NIL))))), 243, 394, 637)
      ; CRAZY3ADD (MTWO(MONE(MONE(MTWO(MTWO NIL)))), ONE(ZERO(TWO NIL)), -230, 19, -211)
      ; CRAZY3ADD (TWO(ZERO(TWO NIL)), MTWO(MTWO(MTWO(MONE(MONE(MONE NIL))))), 20, -377, -357)
      ; CRAZY3ADD (TWO(ZERO(ONE(ZERO(ZERO(TWO NIL))))), ZERO(MONE(ZERO(ZERO(MTWO(MTWO NIL))))), 497, -651, -154)
      ; CRAZY3ADD (MTWO(ZERO(MTWO(MONE(MTWO(MONE NIL))))), TWO(TWO(ONE(TWO(ONE NIL)))), -452, 152, -300)
      ; CRAZY3ADD (MTWO(MONE(MONE(MONE(ZERO(MTWO NIL))))), ZERO(ONE(TWO(TWO(TWO(ONE NIL))))), -527, 480, -47)
      ; CRAZY3ADD (ONE(TWO(ZERO(ZERO(ONE NIL)))), ONE(TWO(TWO(ONE(ONE(ZERO(ONE NIL)))))), 88, 862, 950)
      ; CRAZY3ADD (ZERO(MTWO(MTWO(MONE(MTWO(MTWO NIL))))), ZERO(TWO(TWO(ZERO(ZERO(ZERO(ONE NIL)))))), -699, 753, 54)
      ; CRAZY3ADD (ZERO(ZERO(ONE(ONE(TWO NIL)))), MTWO(ZERO(MTWO(MONE(ZERO(MONE NIL))))), 198, -290, -92)
      ; CRAZY3ADD (ZERO(ONE(ZERO(ONE(TWO NIL)))), MONE(MTWO(MONE(ZERO(MTWO(MTWO NIL))))), 192, -664, -472)
      ; CRAZY3ADD (MONE(MTWO(MONE(MTWO(MONE(MONE NIL))))), MONE(MONE(MONE(ZERO(MONE(MTWO NIL))))), -394, -580, -974)
      ; CRAZY3ADD (ONE(ZERO(TWO(TWO(ZERO(TWO NIL))))), ZERO(ONE(TWO(TWO(TWO(ONE NIL))))), 559, 480, 1039)
      ; CRAZY3ADD (ZERO(TWO(TWO(ZERO(TWO(ZERO(ONE NIL)))))), MONE(ZERO(ZERO(MONE(MONE(ZERO(MONE NIL)))))), 915, -838, 77)
      ; CRAZY3ADD (ONE(ZERO(TWO(TWO(TWO NIL)))), ONE(ZERO(ONE NIL)), 235, 10, 245)
      ; CRAZY3ADD (TWO(TWO(ONE(TWO(ZERO(ONE NIL))))), ZERO(MTWO(MONE(MONE(ZERO(MTWO NIL))))), 314, -528, -214)
      ; CRAZY3ADD (ZERO(MONE(MONE(MTWO(MTWO NIL)))), ZERO(TWO(ONE(ONE NIL))), -228, 42, -186)
      ; CRAZY3ADD (ZERO(ZERO(TWO(TWO(ONE(ONE NIL))))), ONE(ONE(ONE(TWO(TWO(ONE NIL))))), 396, 472, 868)
      ; CRAZY3ADD (ZERO(ONE(ZERO(ONE(ZERO(TWO NIL))))), ONE(ONE(ZERO(ONE(ONE NIL)))), 516, 112, 628)
      ; CRAZY3ADD (TWO(ONE(TWO(ZERO(TWO NIL)))), MTWO(MONE(MTWO(MONE(MTWO(MTWO NIL))))), 185, -698, -513)
      ; CRAZY3ADD (TWO(ONE(ONE(ZERO(ZERO(TWO NIL))))), ZERO(ONE(ZERO(TWO(ONE(TWO NIL))))), 500, 624, 1124)
      ; CRAZY3ADD (TWO(ZERO(TWO(ONE(ONE(TWO NIL))))), ONE(TWO(ONE(ZERO(ZERO(TWO NIL))))), 614, 502, 1116)
      ; CRAZY3ADD (TWO(TWO(ZERO(ZERO(ONE(TWO NIL))))), ZERO(ONE(ONE(ZERO(TWO(TWO NIL))))), 575, 660, 1235)
      ; CRAZY3ADD (ZERO(MONE(MTWO(ZERO(MTWO(MONE NIL))))), MTWO(MONE(ZERO(MONE(ZERO(ZERO(MONE NIL)))))), -426, -761, -1187)
      ; CRAZY3ADD (MONE(MONE(MTWO(ZERO(ZERO(ZERO(MONE NIL)))))), ONE(TWO(ZERO(ONE(TWO(ONE NIL))))), -751, 439, -312)
      ; CRAZY3ADD (ONE(ZERO(ONE(ZERO(TWO(TWO NIL))))), MTWO(ZERO(MTWO(MONE NIL))), 658, -47, 611)
      ; CRAZY3ADD (ZERO(TWO(ONE(ZERO(TWO(ZERO(ONE NIL)))))), TWO(TWO(TWO(ONE(ONE(ONE NIL))))), 906, 377, 1283)
      ; CRAZY3ADD (MTWO(MTWO(MONE(ZERO(MTWO(ZERO(MONE NIL)))))), MTWO(ZERO(ZERO(ZERO(MONE NIL)))), -908, -83, -991)
      ; CRAZY3ADD (ZERO(MTWO(MONE(MONE(ZERO(ZERO(MONE NIL)))))), ONE(ZERO(ONE(TWO(TWO(ZERO(ONE NIL)))))), -771, 955, 184)
      ; CRAZY3ADD (MTWO(MTWO(MTWO(ZERO(MTWO NIL)))), TWO(ONE(ZERO(ZERO(TWO(ZERO(ONE NIL)))))), -188, 896, 708)
      ; CRAZY3ADD (ZERO(ZERO(ZERO(TWO NIL))), ZERO(ZERO(TWO(TWO(ZERO(TWO NIL))))), 54, 558, 612)
      ; CRAZY3ADD (TWO(ONE(ONE(TWO(ONE(ZERO(ONE NIL)))))), ZERO(MONE(MONE(MONE(MTWO(MONE NIL))))), 878, -444, 434)
      ; CRAZY3ADD (ZERO(ZERO(ZERO(ZERO(MTWO(ZERO(MONE NIL)))))), ZERO(TWO(ONE(ZERO(ZERO(ZERO(ONE NIL)))))), -891, 744, -147)
      ; CRAZY3ADD (MONE(MONE(ZERO(MTWO(MTWO(ZERO(MONE NIL)))))), ONE(ONE(TWO(TWO(ZERO(TWO NIL))))), -949, 562, -387)
      ; CRAZY3ADD (MTWO(ZERO(MONE(MTWO(MONE(MTWO NIL))))), MTWO(ZERO(ZERO(MTWO(MONE(MONE NIL))))), -632, -380, -1012)
      ; CRAZY3ADD (ZERO(TWO(ZERO(ZERO(TWO(ONE NIL))))), ONE(TWO(ZERO(TWO(TWO(ZERO(ONE NIL)))))), 411, 952, 1363)
      ; CRAZY3ADD (MONE(MONE(ZERO(MTWO(MONE(MTWO NIL))))), MONE(MTWO(ZERO(MTWO(MTWO NIL)))), -625, -223, -848)
      ; CRAZY3ADD (ZERO(ZERO(MTWO(MONE(MTWO(MONE NIL))))), ZERO(ZERO(ONE(TWO NIL))), -450, 63, -387)
      ; CRAZY3ADD (ZERO(ZERO(ZERO(MONE(ZERO(MTWO NIL))))), ZERO(ONE(ZERO(ONE(ZERO(ONE NIL))))), -513, 273, -240)
      ; CRAZY3ADD (MTWO(MTWO(MONE(ZERO(MTWO NIL)))), ZERO(MTWO(MONE(MTWO(MONE(MTWO NIL))))), -179, -636, -815)
      ; CRAZY3ADD (ZERO(MTWO(MTWO NIL)), MTWO(MTWO(MONE(MONE(ZERO(MONE NIL))))), -24, -287, -311)
      ; CRAZY3ADD (TWO(TWO(TWO(ONE(ONE(ONE NIL))))), MONE(MONE(MONE(ZERO(MTWO NIL)))), 377, -175, 202)
      ; CRAZY3ADD (MTWO(MONE(MTWO(MONE(MTWO(MONE NIL))))), MTWO(MONE(MONE(MONE(MTWO(MTWO NIL))))), -455, -689, -1144)
      ; CRAZY3ADD (MONE(ZERO(MONE(MONE(MTWO NIL)))), MTWO(ZERO(MONE(MONE(MTWO(MONE NIL))))), -199, -443, -642)
      ; CRAZY3ADD (ZERO(TWO(ONE(ONE(TWO(ZERO(ONE NIL)))))), MTWO(ZERO(MTWO(MTWO(MONE(MONE NIL))))), 933, -398, 535)
      ; CRAZY3ADD (ONE(TWO(TWO(ZERO(TWO(ONE NIL))))), MONE(MONE(MONE(MTWO(MTWO(MTWO NIL))))), 430, -715, -285)
      ; CRAZY3ADD (TWO(TWO(TWO(ZERO(ZERO(ONE(ONE NIL)))))), MTWO(MONE(MONE(MTWO(ZERO(ZERO(MONE NIL)))))), 998, -797, 201)
      ; CRAZY3ADD (ONE(ONE(TWO(ONE(ONE(TWO NIL))))), MONE(ZERO(ZERO(MTWO NIL))), 616, -55, 561)
      ; CRAZY3ADD (TWO(ONE(TWO(TWO(ZERO(ZERO(ONE NIL)))))), MONE(MONE(MONE(MTWO(MTWO(MTWO NIL))))), 806, -715, 91)
      ; CRAZY3ADD (MONE(MONE(MTWO(ZERO(ZERO(MTWO NIL))))), ZERO(MONE(MTWO(MTWO(ZERO(MONE NIL))))), -508, -318, -826)
      ; CRAZY3ADD (TWO(ZERO(ONE(ZERO(ONE(ONE NIL))))), TWO(TWO(ONE(ZERO(TWO NIL)))), 335, 179, 514)
      ; CRAZY3ADD (ZERO(MONE NIL), ZERO(MTWO(MTWO(ZERO(MONE NIL)))), -3, -105, -108)
      ; CRAZY3ADD (ZERO(MTWO(MTWO(ZERO(ZERO(MONE(MONE NIL)))))), ZERO(ONE(ZERO(ZERO(ONE(ONE NIL))))), -996, 327, -669)
      ; CRAZY3ADD (ZERO(ZERO(ZERO(ZERO(ONE(ZERO(ONE NIL)))))), ZERO(ZERO(TWO(ONE(TWO(TWO NIL))))), 810, 693, 1503)
      ; CRAZY3ADD (MONE(MONE(MTWO(MONE(ZERO(ZERO(MONE NIL)))))), ZERO(MTWO(MTWO(MTWO(MONE NIL)))), -778, -159, -937)
      ; CRAZY3ADD (ONE(TWO(TWO(ONE(TWO(TWO NIL))))), ONE(ONE(TWO(ZERO(TWO NIL)))), 700, 184, 884)
      ; CRAZY3ADD (MTWO(MONE(ZERO(ZERO(MTWO NIL)))), TWO(TWO(ZERO(ONE(ONE NIL)))), -167, 116, -51)
      ; CRAZY3ADD (ZERO(MTWO(MTWO(MTWO(MONE(MTWO NIL))))), TWO(TWO(ONE(ZERO(ONE(TWO NIL))))), -645, 584, -61)
      ; CRAZY3ADD (ONE(ZERO(ZERO(ZERO(ONE(ONE NIL))))), MTWO(ZERO(MTWO(MONE(MONE NIL)))), 325, -128, 197)
      ; CRAZY3ADD (TWO(TWO(ZERO(TWO(ONE NIL)))), ONE(ONE(TWO(TWO(ONE(ONE NIL))))), 143, 400, 543)
      ; CRAZY3ADD (TWO(TWO(TWO(ZERO(ONE NIL)))), MONE(ZERO(ZERO(ZERO(MTWO(MONE NIL))))), 107, -406, -299)
      ; CRAZY3ADD (ONE(ONE(ZERO(ONE(ZERO(TWO NIL))))), MTWO(MTWO(ZERO(ZERO(ZERO(MTWO NIL))))), 517, -494, 23)
      ; CRAZY3ADD (ZERO(ZERO(TWO(ONE NIL))), ZERO(ZERO(TWO(ZERO(ZERO(TWO NIL))))), 45, 504, 549)
      ]

    let runner (tc: testcase): bool =
      match tc with
      | CRAZY3ADD (n, m, x, y, ans) -> crazy3val(crazy3add(n, m)) = ans

    let string_of_tc (tc: testcase): string * string * string =
      match tc with
      | CRAZY3ADD (n, m, x, y, ans) ->
          ( Printf.sprintf "crazy3add(%d, %d, %d)" x y ans
          , string_of_int ans
          , string_of_int (crazy3val(crazy3add(n, m)))
          )
  end

open TestEx4
let _ = wrapper testcases runner string_of_tc
